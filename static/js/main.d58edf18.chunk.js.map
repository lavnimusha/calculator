{"version":3,"sources":["components/button.jsx","App.js","components/input.jsx","serviceWorker.js","index.js"],"names":["Button","append","num","props","dispatch","type","payload","className","onClick","value","this","Component","connect","state","temp_buf","store","createStore","reducer","buffer","action","JSON","stringify","eval","concat","App","Input","print","class","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iLAWMA,E,2MACFC,OAAS,SAACC,GACM,MAARA,EACJ,EAAKC,MAAMC,SAAS,CAAEC,KAAM,UAEX,MAARH,EACT,EAAKC,MAAMC,SAAS,CAAEC,KAAM,SAASC,QAASJ,IAG9C,EAAKC,MAAMC,SAAS,CAAEC,KAAM,UAAUC,QAASJ,K,wEAEzC,IAAD,OACL,OACQ,4BAAQK,UAAU,MAAMC,QAAS,kBAAI,EAAKP,OAAO,EAAKE,MAAMM,SAC3DC,KAAKP,MAAMM,W,GAdPE,aAmBNC,iBAzBf,SAAyBC,GACrB,MAAO,CACHC,SAAWD,EAAMC,YAuBVF,CAAyBZ,I,43CCxBlCe,MAAQC,8CAAYC,SAI1B,SAASA,UAAqC,IAA7BJ,MAA4B,uDAAtB,CAACK,OAAQ,IAAMC,OAAO,uCAC3C,OAAOA,OAAOd,MACZ,IAAK,UACH,MAAO,CACLa,OAAQE,KAAKC,UAAUC,KAAMT,MAAMK,UAErC,IAAK,QACL,MAAO,CACLA,OAAQ,IAEZ,IAAK,SACL,MAAM,CAEFA,OAASL,MAAMK,OAAQK,OAAOJ,OAAOb,UAEzC,QACE,OAAOO,O,IAIPW,I,swBAEF,OACE,2DAAC,2CAAD,CAAUT,MAAOA,OACjB,kEAAKR,UAAU,OAEb,mFACA,kEAAKA,UAAY,gBACf,2DAAC,iDAAD,CAAOE,MAAS,IAChB,kEAAKF,UAAY,OACf,2DAAC,kDAAD,CAAQC,QAAS,aAAQC,MAAS,IAClC,2DAAC,kDAAD,CAAQD,QAAS,aAAQC,MAAS,IAClC,2DAAC,kDAAD,CAAQD,QAAS,aAAQC,MAAS,IAClC,2DAAC,kDAAD,CAAQD,QAAS,aAAQC,MAAQ,OAEnC,kEAAKF,UAAY,OACf,2DAAC,kDAAD,CAAQC,QAAS,aAAQC,MAAS,IAClC,2DAAC,kDAAD,CAAQD,QAAS,aAAQC,MAAS,IAClC,2DAAC,kDAAD,CAAQD,QAAS,aAAQC,MAAS,IAClC,2DAAC,kDAAD,CAAQD,QAAS,aAAQC,MAAQ,OAEnC,kEAAKF,UAAY,OACf,2DAAC,kDAAD,CAAQC,QAAS,aAAQC,MAAS,IAClC,2DAAC,kDAAD,CAAQD,QAAS,aAAQC,MAAS,IAClC,2DAAC,kDAAD,CAAQD,QAAS,aAAQC,MAAS,IAClC,2DAAC,kDAAD,CAAQD,QAAS,aAAQC,MAAQ,OAEnC,kEAAKF,UAAY,OACf,2DAAC,kDAAD,CAAQC,QAAS,aAAQC,MAAS,IAClC,2DAAC,kDAAD,CAAQD,QAAS,aAAQC,MAAQ,MACjC,2DAAC,kDAAD,CAAQD,QAAS,aAAOC,MAAQ,MAChC,2DAAC,kDAAD,CAAQD,QAAS,aAAQC,MAAQ,c,GA/B3BE,8CAyCHa,2B,wGC5DTC,E,2MACFC,MAAQ,WACJ,EAAKvB,MAAMC,SAAS,CAAEC,KAAM,a,wEAI5B,OAEI,2BAAOsB,MAAM,UAAUlB,MAAOC,KAAKP,MAAMe,QACxCU,QAAQC,IAAInB,KAAKP,MAAMe,a,GAThBP,aAcLC,iBApBf,SAAyBC,GACrB,MAAO,CACHK,OAASL,EAAMK,UAkBRN,CAAyBa,I,2MCbpBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAACZ,EAAA,EAAD,MAASa,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d58edf18.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './button.css';\nimport { connect } from 'react-redux';\n//import {dispatch} from 'react-redux';\n\nfunction mapStateToProps(state) {\n    return {\n        temp_buf : state.temp_buf\n    };\n}\n\nclass Button extends Component {\n    append = (num) => {\n        if (num === 'C')\n        this.props.dispatch({ type: 'CLEAR'});\n\n        else if (num !== '=')\n        this.props.dispatch({ type: 'APPEND',payload: num });\n        \n        else\n        this.props.dispatch({ type: 'DISPLAY',payload: num });\n    }\n    render() {\n        return (\n                <button className=\"box\" onClick={()=>this.append(this.props.value)}>\n                {this.props.value}\n            </button>\n        )\n    }\n}\nexport default connect(mapStateToProps)(Button);","import React, {Component} from 'react';\nimport './App.css';\nimport Button from './components/button';\nimport Input from './components/input';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nconst store = createStore(reducer);\n/*const initialState ={\n  buffer: \"\",\n};*/ \nfunction reducer(state={buffer: ''} , action){\n  switch(action.type) {\n    case 'DISPLAY':\n      return {\n        buffer: JSON.stringify(eval((state.buffer)))\n      };\n      case 'CLEAR':\n      return {\n        buffer: ''\n      };\n    case 'APPEND':\n    return{\n        \n        buffer: (state.buffer).concat(action.payload)\n      };\n    default:\n      return state;\n  }\n}\n\nclass App extends Component{\n  render(){\n    return (\n      <Provider store={store}>\n      <div className=\"app\">\n      \n        <h1>CALCULATOR</h1>\n        <div className = \"calc-wrapper\">\n          <Input value = {1}/>\n          <div className = \"row\">\n            <Button onClick={()=>{}} value = {9}/>\n            <Button onClick={()=>{}} value = {8}/>\n            <Button onClick={()=>{}} value = {7}/>\n            <Button onClick={()=>{}} value = \"+\"/>\n          </div>\n          <div className = \"row\">\n            <Button onClick={()=>{}} value = {6}/>\n            <Button onClick={()=>{}} value = {5}/>\n            <Button onClick={()=>{}} value = {4}/>\n            <Button onClick={()=>{}} value = \"-\"/>\n          </div>\n          <div className = \"row\">\n            <Button onClick={()=>{}} value = {3}/>\n            <Button onClick={()=>{}} value = {2}/>\n            <Button onClick={()=>{}} value = {1}/>\n            <Button onClick={()=>{}} value = \"/\"/>\n          </div>\n          <div className = \"row\">\n            <Button onClick={()=>{}} value = {0}/>\n            <Button onClick={()=>{}} value = \"C\"/>\n            <Button onClick={()=>{}}value = \"=\"/>\n            <Button onClick={()=>{}} value = \"*\"/>\n          </div>\n        </div>\n      </div> \n      </Provider>\n    );\n  }\n  \n}\n\nexport default App;\n","import React, { Component } from 'react'\nimport './input.css';\nimport { connect } from 'react-redux';\n//import {dispatch} from 'react-redux';\n\nfunction mapStateToProps(state) {\n    return {\n        buffer : state.buffer\n    };\n}\n\nclass Input extends Component {\n    print = () => {\n        this.props.dispatch({ type: 'DISPLAY' });\n    }\n    \n    render() {\n        return (\n            \n            <input class=\"display\" value={this.props.buffer}>\n            {console.log(this.props.buffer)}\n            </input>\n        )\n    }\n}\nexport default connect(mapStateToProps)(Input); \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}